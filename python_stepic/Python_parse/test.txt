коления&#160;— декларативную (более подробно см. раздел Языки низкого и высокого уровня). Многие декларативные языки включают в себя определённые императивные возможности, иногда&#160;— наоборот.
С ростом размера и сложности программ уже при использовании языков второго поколения начала формироваться парадигма процедурного программирования, требующая производить декомпозицию крупных процедур в цепочку иерархически связанных более мелких. Примерно в то же время появились первые языки третьего поколения[en] и сформировалось сперва структурное программирование как прямое развитие процедурного, а затем и модульное. Со временем появилось огромное количество разнообразных путей решения проблемы комплексирования растущих программных систем&gt;&gt;&gt; с сохранением исходно императивного подхода в основе. В некоторых случаях достигнуто существенное влияние на показатели скорости разработки и качества, но в общем и целом, как выше отмечено&gt;&gt;&gt;, языки третьего поколения абстрагируются от машинной логики лишь до определённого уровня и незначительно подвержены эквивалентным преобразованиям[en]. К настоящему времени третье поколение языков представлено наиболее обширным спектром разнообразных парадигм.
К четвёртому поколению[en] относят функциональные языки, из которых выделяются «чисто функциональные» (англ.&#160;purely functional, соответствующие выше упомянутой технической категории ссылочно-прозрачных), а остальные называются «не чисто функциональными» (англ.&#160;impurely functional)
К пятому поколению[en] относят языки логического программирования, в котором, помимо традиционного, выделяется несколько особых форм, например, программирование ограничениями. Фактически, языки пятого поколения&#160;— это языки четвёртого поколения, дополненные базой знаний&#91;24&#93;&#160;— поэтому эта категория, как уже выше отмечено, не является общепринятой.
Многие парадигмы являются условно провозглашёнными методиками организации структуры программы и применимы к большому множеству языков. Наиболее широкий охват имеют структурная и модульная&#160;— они применяются и в императивных, и в декларативных языках. Другие парадигмы тесно связаны с техническими свойствами. Например, подмножество языка С++&#160;— шаблоны&#160;— формально может рассматриваться как полный по Тьюрингу чисто функциональный язык, но С++ не обладает присущими функциональным языкам свойствами (ссылочная прозрачность, типобезопасность, гарантия оптимизации хвостовых вызовов и др.). Как следствие, применяемые в компиляции функциональных языков алгоритмы не могут быть применены к С++, и потому ведущие исследователи функциональной парадигмы отзываются о С++ весьма скептически (подробнее см. критика шаблонов С++).

Языки для программирования в мелком и крупном масштабе[править | править код]
Основная статья: Программирование в крупном и мелком масштабе&#160;(англ.)
Программы могут решать задачи различного масштаба[en]: одна программа строит график для заданной функции, а другая управляет документооборотом крупного предприятия. Различные языки программирования рассчитаны на разный исходный масштаб задачи и, что ещё более важно, по-разному справляются с ростом сложности программных систем. Ключевым качеством языка, от которого зависит, как меняется трудоёмкость разработки по мере наращивания системы, является абстракция, то есть возможность отделять смысл (поведение) компонента системы от способа его реализации&#91;41&#93;&#91;42&#93;.



Рост сложности любой программной системы принципиально ограничен тем пределом, до которого ещё можно сохранять контроль над ней: если объём информации, требуемый для осмысления компонента этой системы, превышает «вместимость» мозга одного человека, то этот компонент не будет до конца понят. Станет чрезвычайно тяжело дорабатывать его или исправлять ошибки, и от каждой корректировки можно ждать введения новых ошибок из-за этого неполного знания.Оригинальный текст&#160;(англ.)
There is a fundamental limit to complexity of any software system for it to be still manageable: if it requires more than "one brainfull" of information to understand a component of the system, then that component will not be understood fully. It will be extremely difficult to make enhancements or ﬁx bugs, and each ﬁx is likely to introduce further errors due to this incomplete knowledge.
— Martin Ward, «Language Oriented Programming»&#91;43&#93;
Такие показатели качества исходного кода, как тестируемость и модифицируемость, очевидным образом определяются коэффициентом повторного использования. Это может означать как применение разных функций к одному и тому же компоненту, так и возможность применять одну и ту же функцию к разным компонентам. Параметрически полиморфные (особенно выводящие) и динамические системы типов существенно повышают коэффициент повторного использования: например, функция, вычисляющая длину массива, будет применима к бесконечному множеству типов массивов&#91;27&#93;&#91;44&#93;. Если же язык требует в сигнатуре функции указывать конкретный способ реализации входных данных, то этот коэффициент резко страдает. Например, Pascal критиковался за необходимость всегда указывать конкретный размер массива&#91;45&#93;, а C++&#160;— за необходимость различать . и -&gt; при обращении к компонентам составных данных[en]&#91;46&#93;. Языки высшего порядка&gt;&gt;&gt; позволяют выделять схемы взаимодействия функций в многократно вызываемый блок кода (функцию высшего порядка)&#91;36&#93;&#91;47&#93;, а наибольших значений повторное использование достигает при переходе к языку более высокого уровня&#160;— при необходимости специально разрабатываемого для данной задачи&#160;— в этом случае повторно используется язык, а не одна функция&#91;43&#93;, а сама разработка языка может вестись с интенсивным повторным использованием компонентов компилятора&#91;48&#93;.
С развитием языков появились особые (присущие исключительно программированию, не требовавшиеся ранее в математике) категории компонентов и зависимостей: монады, классы типов, полиморфные ветвления, аспекты и др. Их использование позволяет выражать бо́льшую функциональность в том же объёме кода, тем самым переводя программирование-по-крупному[en] в более мелкий масштаб.
Другие фундаментальные проблемы, связанные со сложностью крупных систем, лежат вне самих программ: это взаимодействие разрабатывающих её программистов между собой, документирование и&#160;т.&#160;д. Помимо обеспечения абстракции, не последнюю роль в этом играет концептуальная целостность&gt;&gt;&gt; выбранного языка программирования&#91;49&#93;&#91;43&#93;.
Кроме свойств семантики языка, повторное использование может обеспечиваться посредством модульной структуры программной системы или комплекса. Более того, сколь бы гибким ни был язык, работа с огромными объёмами кодов, особенно множеством людей, требует их декомпозиции на модули тем или иным образом. Модульная структура подразумевает не просто разбиение монолитного исходного кода программы на множество текстовых файлов, а обеспечение абстракции в более крупном масштабе, то есть определение интерфейса для всякого логически завершённого фрагмента и сокрытие деталей его реализации. В зависимости от применённых в языке правил определения области видимости язык может допускать или не допускать автоматическое определение зависимостей. Если согласно правилам возможен конфликт имён, то автоопределение зависимостей невозможно, и тогда в заголовке модуля требуется явно перечислять имена модулей, компоненты которых в нём используются.
Некоторые языки (например, Basic или классический Pascal Вирта) ориентированы исключительно на разработку мелких, структурно простых программ. Они не обеспечивают ни развитой системы модулей, ни гибкости конкретных фрагментов. Язык Си создавался как «высокоуровневый ассемблер», что само по себе не предполагает разработку систем выше некоторого порога сложности, поэтому поддержка крупномасштабного программирования в него заложена также не была. Некоторые языки высокого и сверх-высокого уровня (Erlang, Smalltalk, Prolog) предоставляют в качестве базовых примитивных элементов концепции, которые в других языках представляются конструктивно и алгоритмически сложными (процессы, классы, базы знаний)&#160;— аналогично разнообразным математическим исчислениям (см. также концептуальная целостность языков). Поэтому такие языки нередко рассматриваются в роли предметно-специфичных&#160;— на них выглядят простыми некоторые (но далеко не все) задачи, которые на других языках выглядят сложными. Однако, расширение функциональности в других аспектах на этих языках может оборачиваться затруднениями. Standard ML и его родственники расслаиваются на два языка, из которых один&#160;— «язык-ядро» (англ.&#160;core language)&#160;— ориентирован на разработку простых программ, а другой&#160;— «язык модулей» (англ.&#160;module language),— соответственно, на нелинейную компоновку их в сложные программные системы. Со временем были построены варианты слияния их воедино (1ML). Многие другие языки также включают системы модулей, но большинство из них являются языками модулей первого порядка&gt;&gt;&gt;. Язык модулей ML является единственным в своём роде языком модулей высшего порядка&gt;&gt;&gt;. Языки Lisp и Forth позволяют наращивать системы произвольно и безгранично, в том числе позволяя создавать встраиваемые предметно-специфичные языки внутри себя (как своё синтаксическое и семантическое подмножество)&#160;— поэтому их нередко называют метаязыками.
Наиболее популярным на сегодняшний день подходом к решению проблемы комплексирования является объектно-ориентированное программирование, хотя успешность его применения на протяжении десятилетий существования неоднократно подвергалась скепсису, и до сих пор отсутствуют достоверные данные о том, что он приносит выигрыш по сравнению с другими подходами по тем или иным показателям качества. Ему сопутствуют (а порой конкурируют) различные технологии регламентирования зависимостей между компонентами: метаклассы, контракты, прототипы, примеси, типажи и др.
Более мощным подходом исторически считалось использование различных форм метапрограммирования, то есть автоматизации самого процесса разработки на различных уровнях. Принципиально различается метапрограммирование внешнее по отношению к языку и доступное в самом языке. При использовании языков первого порядка&gt;&gt;&gt; сложность растущих программных систем быстро переходит порог способностей человека по восприятию и переработке информации, поэтому применяются внешние средства предварительного визуального проектирования, позволяющие обозревать сложные схемы в упрощённом виде и в уменьшенном масштабе и затем автоматически порождать каркас кода&#160;— см. CASE. В сообществах разработчиков, использующих языки высшего порядка&gt;&gt;&gt;, доминирует прямо противоположный подход&#160;— пресекать саму возможность выхода сложности из-под контроля за счёт разделения информационных моделей на независимые составляющие и разработки средств автоматического преобразования одних моделей в другие&#160;— см. языково-ориентированное программирование.

 Концептуальная целостность языков[править | править код]
Фредерик Брукс&#91;50&#93; и Ч. Э.&#160;Р.&#160;Хоар&#91;51&#93; делают акцент на необходимости обеспечения концептуальной целостности информационных систем вообще и языков программирования в частности, чтобы в каждой части системы использовались сходные синтаксические и семантические формы и не требовалось осваивать помимо собственно состава системы также и правила её идиоматического использования. Хоар предсказывал, что сложность Ады станет причиной катастроф. Алан Кэй отделяет языки, являющиеся «стилем во плоти» (англ.&#160;crystalization of style) от прочих языков, являющихся «склеиванием возможностей» (англ.&#160;agglutination of features)&#91;52&#93;. Грег Нельсон&#91;53&#93; и Эндрю Аппель[en]&#91;27&#93; выделяют в особую категорию «языки, наследованные от математики» (англ.&#160;mathematically-derived languages).
Эти акценты призывают к использованию языков, воплощающих некое математическое исчисление, аккуратно адаптированное для того, чтобы быть более практичным языком для разработки реальных программ. Такие языки отличаются ортогональностью, и хотя это означает необходимость вручную реализовывать многие распространённые идиомы, доступные в более популярных языках в качестве примитивов языка, выразительность[en] таких языков в целом может быть существенно выше.
Лишь некоторые языки попадают под эту категорию; большинство же языков проектируются приоритетно исходя из возможности эффективной трансляции в машину Тьюринга. Многие языки опираются на общие теории, но при разработке они почти никогда не проверяются на безопасность совместного использования конкретных языковых элементов, являющихся частными приложениями этих теорий, что неизбежно приводит к несовместимости между реализациями языка. Эти проблемы либо игнорируются, либо начинают преподноситься как естественное явление (англ.&#160;«not a bug, but a feature»), но в действительности их причиной является то, что язык не был подвергнут математическому анализу.&#91;54&#93;
Примеры математически обоснованных языков и воплощаемых ими математических моделей:

Agda, Epigram[en], Idris&#160;— интуиционистская теория типов[en] Мартин-Лёфа.
APL и его потомки (J, K)&#160;— оригинальная семантика, не имеющая названия, воплощающая нотацию Айверсона для исчисления массивов (часто встречается термин «array languages»).
Coq&#160;— исчисление индуктивных конструкций[en].
Erlang&#160;— исчисление процессов (первоначально в форме модели акторов, позже также построено обоснование на



        &#x03C0;


    {\displaystyle \pi }

-исчислении&#91;55&#93;).
Forth&#160;— стековая машина[en] и конкатенативный язык программирования.
Haskell&#160;— теория категорий (включая «декартово замкнутую категорию», воплощающую лямбда-исчисление; категорию монад для моделирования побочных эффектов; расширение системы типов Хиндли&#160;— Милнера; систему родо́в; и др.)
Joy&#160;— композиция функций и гомоморфизм (иначе говоря, чистый конкатенативный язык программирования, и, как следствие, чистый функциональный).
Lisp&#160;— лямбда-исчисление Чёрча (в том числе язык S-выражений, воплощающий нотацию пар Чёрча[en]).
Scheme&#160;— «облагороженный» диалект Лиспа (сильнее типизированный, в большей степени гомоиконный, ограничивающийся гигиеническими макроопределениями[en] и соблюдающий числовую башню[en]), дополненный нотацией продолжений.
ML&#160;— типизированное лямбда-исчисление, то есть лямбда-исчисление, дополненное системой типов Хиндли&#160;— Милнера.
Prolog&#160;— исчисление предикатов.
Mercury&#160;— исчисление предикатов, дополненное системой типов Хиндли&#160;— Милнера.
Smalltalk&#160;— теория множеств&#91;56&#93; (с соблюдением числовой башни[en]).
SQL&#160;— исчисление кортежей (вариант реляционного исчисления, в свою очередь основанного на исчислении предикатов первого порядка)
SGML и его потомки (HTML, XML)&#160;— нотация деревьев (важный случай графов).
Unlambda&#160;— комбинаторная логика.
Регулярные выражения.
Рефал&#160;— оригинальная семантика Турчина, носящая название «Рефал-машины» или «Рефал-автомата», созданная на основе нормального алгоритма Маркова, воплощающая композицию теории автоматов, сопоставления с образцом и переписывания термов.
Наличие математического обоснования для языка может гарантировать (или, как минимум, обещать с очень высокой вероятностью) некоторые или все из следующих положительных свойств:

Существенное повышение стабильности программ. В одних случаях&#160;— за счёт построения доказательства надёжности для самого языка (см. типобезопасность), существенного упрощения формальной верификации программ, и даже получения языка, который сам является системой автоматического доказательства (Coq, Agda). В других случаях&#160;— за счёт раннего обнаружения ошибок на первых же пробных запусках программ (Forth и регулярные выражения).
Обеспечение потенциально более высокой эффективности программ. Даже если семантика языка далека от архитектуры целевой платформы компиляции, к нему могут быть применимы формальные методики глобального анализа программ (хотя трудоёмкость написания даже тривиального транслятора может оказаться выше). Например, для языков Scheme и Standard ML существуют развитые полнопрограммно-оптимизирующие компиляторы и суперкомпиляторы, результат работы которых может уверенно конкурировать по скорости с языком низкого уровня Си и даже опережать последний (хотя ресурсоёмкость работы самих компиляторов оказывается значительно выше). Одна из самых быстрых СУБД&#160;— KDB&#91;57&#93;&#160;— написана на языке K. Язык Scala (унаследовавший математику от ML) обеспечивает на платформе JVM более высокую скорость, чем «родной» для неё язык Java&#91;источник не указан 753 дня&#93;. С другой стороны, Forth имеет репутацию одного из самых нетребовательных к ресурсам языков (менее требователен, чем Си) и используется для разработки приложений реального времени под самые маломощные ЭВМ; кроме того, транслятор Форта является одним из наименее трудоёмких в реализации на ассемблере.
Заранее известный (неограниченный или, наоборот, чётко очерченный) предел роста сложности программных компонентов, систем и комплексов, которые можно выразить средствами этого языка с сохранением показателей качества&#91;27&#93;&#91;58&#93;. Языки, не имеющие математического обоснования (а именно такие наиболее часто применяются в мейнстриме: C++, Java, C#, Delphi и др.), на практике ограничивают реализуемую функциональность и/или снижают качество по мере усложнения системы&#91;59&#93;, так как им присущи экспоненциальные кривые роста сложности как касательно работы одного отдельно взятого человека, так и касательно сложности управления проектом в целом&#91;49&#93;&#91;60&#93;. Прогнозируемая сложность системы приводит либо к поэтапной декомпозиции проекта на множество более мелких задач, каждая из которых решается соответствующим языком; либо к языково-ориентированному программированию для случая, когда адресуемой языком задачей является как раз описание семантик и/или символьные вычисления (Lisp, ML, Haskell, Рефал, Регулярные выражения). Языки с неограниченным пределом роста сложности программ нередко относят к метаязыкам (что в непосредственном толковании термина не верно, но практике сводимо, так как всякий мини-язык, выбранный для решения некоторой подзадачи в составе общей задачи, может быть представлен в виде синтаксического и семантического подмножества данного языка, не требуя трансляции&#91;61&#93;).
Удобство для человека при решении задач, на которые этот язык ориентирован по своей природе (см. проблемно-ориентированный язык), что в некоторой степени также способно (косвенно) повлиять на повышение стабильности результирующих программ за счёт повышения вероятности обнаружения ошибок в исходном коде и снижения дублирования кода.
Особые категории языков[править | править код]
Учебные
Предметно-специфичные
Эзотерические
Визуальные
Игрушечные[en]*
Формальные преобразования и оптимизация[править | править код]
В.&#160;Ф.&#160;Турчин отмечает&#91;62&#93;, что достоинства всякого формализованного языка определяются не только тем, сколь он удобен для непосредственного использования человеком, но и тем, в какой степени тексты на этом языке поддаются формальным преобразованиям.
Например, ссылочная прозрачность означает, что параметры функций не обязаны вычисляться перед вызовом&#160;— вместо этого фактически переданное выражение может быть целиком подставлено на место переменной в функции, и поведение функции от этого не изменится. Это открывает возможности почти произвольных автоматических преобразований программ[en]: могут устраняться ненужные промежуточные представления данных, редуцироваться сложные цепочки вычислений, подбираться оптимальное количество параллельных процессов, вводиться мемоизация, и пр. С другой стороны, это означает полное отсутствие побочных эффектов, а это делает реализацию некоторых алгоритмов заведомо менее эффективной, чем при использовании изменяемого состояния.
Для небольших и простых программ языки высокого уровня порождают машинный код большего размера и исполняются медленнее. Однако, для алгоритмически и структурно сложных программ преимущество может быть на стороне некоторых языков высокого уровня, так как человек физически не способен выражать сложные концепции с учётом их эффективного исполнения на языке машины. К примеру, существует бенчмарк, на котором MLton и Stalin Scheme[en] уверенно опережают GCC. Есть масса частных причин, по которым автоматическая оптимизация в ходе трансляции языков высокого уровня даёт в принципе более высокую скорость исполнения, чем сознательный контроль способа реализации на языках низкого уровня. Например, имеются достоверные данные о том, что автоматическое управление памятью более эффективно, чем ручное, уже только при использовании динамического метода (см. сборка мусора)&#91;63&#93;, а существует и потенциально более эффективный статический метод (см. управление памятью на основе регионов[en]). Далее, для каждого микроконтекста необходимо распределить регистры с учётом минимизации обращения к памяти, а это требует решения задачи раскраски графа. Такого рода особенностей машинной логики очень много, так что общая информационная сложность возрастает экспоненциально при каждом «шаге на уровень вниз», а компиляция языка высокого уровня может включать десятки таких шагов.
Существует множество стратегий автоматической оптимизации. Некоторые универсальны, другие могут быть применимы лишь к языкам определённой природы, а некоторые зависят от способа использования языка. Примером может служить оптимизация хвостовых вызовов и её частный случай&#160;— оптимизация хвостовой рекурсии. Хотя компиляторы многих языков осуществляют оптимизацию хвостовой рекурсии при определённых условиях, лишь некоторые языки способны семантически гарантировать оптимизацию хвостовых вызовов в общем случае. Стандарт языка Scheme требует, чтобы всякая реализация гарантировала её. Для многих функциональных языков она в принципе применима, но лишь оптимизирующие компиляторы её выполняют. В языках вроде Си или С++ она может производиться лишь в определённых случаях и лишь при использовании глобального анализа потока управления&#91;64&#93;.
Языки высшего порядка в большинстве случаев вынуждены исполняться медленнее, чем языки первого порядка. Причины лежат как в самой декомпозиции линейного кода на цепочку вложенных вызовов, так и в вытекающих особенностях низкоуровневого представления функций (см. замыкание) и данных (обёрнутое (англ.&#160;boxed), теговое). Однако, существуют техники агрессивной оптимизации программ, позволяющие редуцировать языки высшего порядка до языков первого порядка (см. дефункциализация[en], MLton, Stalin Scheme[en]).

Популярность языков[править | править код]
Основная статья: Измерение популярности языков&#160;(англ.)
Дополнительные сведения: Индекс TIOBE
Трудно определить, какой язык программирования наиболее популярен, так как значение слова «популярность» зависит от контекста (в английском языке используется термин «usage», имеющий ещё более размытое значение). Один язык может отнимать наибольшее количество человеко-часов, на другом написано наибольшее число строк кода, третий занимает наибольшее процессорное время, а четвёртый наиболее часто служит исследовательской базой в академических кругах. Некоторые языки очень популярны для конкретных задач. Например, Кобол до сих пор доминирует в корпоративных дата-центрах, Фортран&#160;— в научных и инженерных приложениях, вариации языка Си&#160;— в системном программировании, а различные потомки ML&#160;— в формальной верификации&#91;источник не указан 783 дня&#93;. Другие языки регулярно используются для создания самых разнообразных приложений.
Существуют различные метрики для измерения популярности языков, каждая из которых разработана с пристрастием к определённому смыслу понятия популярности:

подсчёт числа вакансий, упоминающих язык;
количество проданных книг (учебников или справочников);
оценка количества строк кода, написанных на языке (что не принимает в расчёт редко публикуемые случаи использования языков);
подсчёт упоминаний языка в запросах поисковиков.
Следует заметить, что высокие оценки по этим показателям не только никак не свидетельствуют о высоком техническом уровне языка и/или оптимизации расходов при его использовании, но и напротив, порой могут говорить об обратном. Например, язык Кобол входит в число лидеров по количеству написанных на нём строк кода, но причиной этому является крайне низкий показатель модифицируемости кода, что делает этот код не повторно используемым, а legacy-кодом[en]. Как следствие, поддержка программ на Коболе в кратковременной перспективе обходится значительно дороже, чем программ на большинстве современных языков, но переписывание их с нуля потребовало бы значительных единовременных вложений, и может сравниваться только с долговременными расходами. Техническое несовершенство Кобола обусловлено тем, что его разрабатывали без привлечения экспертов в области информатики&#91;65&#93;&#91;66&#93;.

См. также[править | править код]
Компьютерный язык
Программирование
Hello, world!
Стандарт оформления кода
Теория языка программирования
Примечания[править | править код]


↑ ISO/IEC/IEEE 24765:2010 Systems and software engineering&#160;— Vocabulary

↑ ISO/IEC 2382-1:1993, Information technology&#160;— Vocabulary&#160;— Part 1: Fundamental terms

↑ Список языков программирования&#160;(англ.).&#32;Архивировано 22&#160;августа 2011&#160;года.

↑ Rojas, Raúl, et al. (2000). «Plankalkül: The First High-Level Programming Language and its Implementation». Institut für Informatik, Freie Universität Berlin, Technical Report B-3/2000. (full text)

↑ Computer Languages, 1989, 1. Невидимый конструктор § Создание кодов, понятных человеку, с. 16.

↑ Linda Null, Julia Lobur, The essentials of computer organization and architecture, Edition 2, Jones &amp; Bartlett Publishers, 2006, ISBN 0-7637-3769-0, p. 435

↑ O'Reilly Media.&#32;History of programming languages&#160;(неопр.)&#32;(PDF).&#32;Проверено 5 октября 2006.&#32;Архивировано 10&#160;мая 2013&#160;года.

↑ Frank da Cruz. IBM Punch Cards Columbia University Computing History.

↑ Richard L. Wexelblat: History of Programming Languages, Academic Press, 1981, chapter XIV.

↑ Пратт, 1979, 4.6. Сопоставление с образцом, с. 130—132.

↑ Пратт, 1979, 15. Снобол 4, с. 483—516.

↑ Пратт, Зелковиц, 2002, 8.4.2. Сопоставление с образцом, с. 369—372.

↑ François Labelle.&#32;Programming Language Usage Graph&#160;(неопр.).&#32;SourceForge.&#32;Проверено 21 июня 2006.&#32;Архивировано 10&#160;мая 2013&#160;года.

↑ Hayes, Brian (2006). “The Semicolon Wars”. American Scientist. 94 (4): 299—303..mw-parser-output cite.citation{font-style:inherit}.mw-parser-output q{quotes:"\"""\"""'""'"}.mw-parser-output code.cs1-code{color:inherit;background:inherit;border:inherit;padding:inherit}.mw-parser-output .cs1-lock-free a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/6/65/Lock-green.svg/9px-Lock-green.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output .cs1-lock-limited a,.mw-parser-output .cs1-lock-registration a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/d/d6/Lock-gray-alt-2.svg/9px-Lock-gray-alt-2.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output .cs1-lock-subscription a{background:url("//upload.wikimedia.org/wikipedia/commons/thumb/a/aa/Lock-red-alt-2.svg/9px-Lock-red-alt-2.svg.png")no-repeat;background-position:right .1em center}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration{color:#555}.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration span{border-bottom:1px dotted;cursor:help}.mw-parser-output .cs1-hidden-error{display:none;font-size:100%}.mw-parser-output .cs1-visible-error{font-size:100%}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-right{padding-right:0.2em}

↑ Tetsuro Fujise, Takashi Chikayama, Kazuaki Rokusawa, Akihiko Nakase (December 1994). «KLIC: A Portable Implementation of KL1» Proc. of FGCS '94, ICOT Tokyo, December 1994. http://www.icot.or.jp/ARCHIVE/HomePage-E.html KLIC is a portable implementation of a concurrent logic programming language KL1.

↑ Jim Bender.&#32;Mini-Bibliography on Modules for Functional Programming Languages&#160;(неопр.).&#32;ReadScheme.org&#32;(15&#160;марта 2004).&#32;Проверено 27 сентября 2006.&#32;Архивировано 10&#160;мая 2013&#160;года.

↑ Stroustrup, Bjarne&#32;Evolving a language in and for the real world: C++ 1991-2006&#160;(неопр.).

↑ Т. Пратт, М. Зелковиц.&#32;Языки программирования. Разработка и реализация.&#160;— 4.&#160;— Санкт-Петербург&#160;: Питер, 2002.&#160;— С.&#160;203.&#160;— 688&#160;с.&#160;— 4000 экз.&#160;— ISBN 5-318-00189-0.

↑ Страуструп Б.&#32;Дизайн и эволюция C++.&#160;— Санкт-Петербург&#160;: Питер, 2006.&#160;— С.&#160;74—76.&#160;— 448&#160;с.&#160;— 2000 экз.&#160;— ISBN 5-469-01217-4.

↑ Сейбел - Кодеры за работой, 2011, Глава 12. Кен Томпсон, с. 414.

↑ Зуев Е.А., Кротов А.Н., Сухомлин В.А.&#32;Язык программирования Си++: этапы эволюции и современное состояние&#160;(неопр.)&#32;(3-4 октября 1996).&#32;Проверено 16 января 2017.

↑ Paulson, "ML for the Working Programmer", 1996, с. 213.

↑ Paulson, "ML for the Working Programmer", 1996, с. 1.

↑ 1 2 3 Mernik, 2012, с. 2—12.

↑ Paulson, "ML for the Working Programmer", 1996, с. 9.

↑ Rick Byers.&#32;Garbage Collection Algorithms&#160;(неопр.).&#32; courses.cs.washington.edu.&#160;— Project for CSEP 521, Winter 2007.&#32;Проверено 28 декабря 2016.

↑ 1 2 3 4 5 Appel - A Critique of Standard ML, 1992.

↑ Harper - Practical Foundations for Programming Languages, 2012, Chapter 4. Statics, с. 35.

↑ Mitchel, 2004, 6.2.1 Type Safety, с. 132—133.

↑ Comparison of static code analyzers: CppCat, Cppcheck, PVS-Studio and Visual Studio

↑ Comparing PVS-Studio with other code analyzers

↑ Пратт, 1979, 2.7. Связывание и время связывания, с. 46—51.

↑ Reynolds, "Theories of programming languages", 1998, 12.4 Deriving a First-Order Semantics.

↑ Strachey - Fundamental Concepts, 1967, 3.5.1. First and second class objects., с. 32—34.

↑ 1 2 Strachey - Fundamental Concepts, 1967, 3.5.1. First and second class objects, с. 32—34.

↑ 1 2 SICP.

↑ Harper - Practical Foundations for Programming Languages, 2012, с. 67.

↑ 1 2 Пратт, Зелковиц, 2002, 1.1 Зачем изучать языки программирования, с. 17—18.

↑ Bruce A. Tate.&#32;Foreword&#32;&#47;&#47;&#32;Seven Languages in Seven Weeks: A Pragmatic Guide to Learning Programming Languages.&#160;— Pragmatic Bookshelf, 2010.&#160;— С.&#160;14—16.&#160;— ISBN 978-1934356593.

↑ Пратт, Зелковиц, 2002, 1.1 Зачем изучать языки программирования, с. 18.

↑ Ахо, Ульман, 1992.

↑ Joyner, 1996, 2.2 Communication, abstraction and precision, с. 4.

↑ 1 2 3 Ward, 1994.

↑ Paulson, "ML for the Working Programmer", 1996, с. 63—64.

↑ Kernigan about Pascal, 1981.

↑ Joyner, 1996, 3.17 ‘.’ and ‘-&gt;’, с. 26.

↑ Paulson, "ML for the Working Programmer", 1996, с. 177—178.

↑ Hudak, 1998.

↑ 1 2 Брукс, 1975, 1995.

↑ Брукс, 1975, 1995, Достижение концептуальной целостности, с. 30.

↑ C.A.R. Hoare&#160;— The Emperor’s Old Clothes, Communications of the ACM, 1981

↑ Алан Кэй.&#32;The Early History of Smalltalk.&#160;— Apple Computer, ACM SIGPLAN Notices, vol.28, №3, March 1993.

↑ Greg Nelson.&#32;Systems Programming with Modula-3.&#160;— NJ: Prentice Hall, Englewood Cliffs, 1991.&#160;— 288&#160;с.&#160;— ISBN 978-0135904640.

↑ Commentary on SML, 1991, с. vii.

↑ Thomas Noll, Chanchal Kumar Roy.&#32;Modeling Erlang in the Pi–Calculus.&#160;— ACM 1-59593-066-3/05/0009, 2005.

↑ Design Principles Behind Smalltalk

↑ kx: Calibrated performance

↑ Luca Cardelli.&#32;Typeful programming.&#160;— IFIP State-of-the-Art Reports, Springer-Verlag, 1991.

↑ Ward, 1994: «There is a fundamental limit to complexity of any software system for it to be still manageable: if it requires more than "one brainfull" of information to understand a component of the system, then that component will not be understood fully. It will be extremely difficult to make enhancements or ﬁx bugs, and each ﬁx is likely to introduce further errors due to this incomplete knowledge.».

↑ Гласс, 2004.

↑ Czarnecki et al, 2004.

↑ Турчин В.&#160;Ф.&#160;Эквивалентные преобразования программ на РЕФАЛе: Труды ЦНИПИАСС 6: ЦНИПИАСС, 1974.

↑ B. Zorn.&#32;The Measured Cost of Conservative Garbage Collection. Technical Report CU-CS-573-92.&#160;// University of Colorado at Boulder.&#160;— 1993.&#160;— DOI:10.1.1.14.1816.

↑ Ehud Lamm.

↑ Richard L. Conner (14 May 1984). “Cobol, your age is showing”. Computerworld. International Data Group. 18 (20): ID/7–ID/18. ISSN&#160;0010-4841.

↑ Robert L. Mitchell.&#32;Cobol: Not Dead Yet&#160;(неопр.).&#32;Computerworld&#32;(4 October 2006).&#32;Проверено 27 апреля 2014.


Литература[править | править код]
Гавриков М. М., Иванченко А. Н., Гринченков Д. В.&#32;Теоретические основы разработки и реализации языков программирования.&#160;— КноРус, 2013.&#160;— 178&#160;с.&#160;— ISBN 978-5-406-02430-0.
Криницкий Н. А., Миронов Г. А., Фролов Г. Д.&#32;Программирование.&#160;— ГИФМЛ, 1963.&#160;— 384&#160;с.
Братчиков И. Л.&#32;Синтаксис языков программирования.&#160;— Наука, 1975.&#160;— 230&#160;с.
Лавров С. С.&#32;Основные понятия и конструкции языков программирования.&#160;— Финансы и статистика, 1982.&#160;— 80&#160;с.
Christopher Strachey.&#32;Fundamental Concepts in Programming Languages&#32;(&#160;(англ.)).&#160;— 1967.
Повторно опубликовано: Christopher Strachey.&#32;Fundamental Concepts in Programming Languages&#32;(&#160;(англ.))&#160;// Higher-Order and Symbolic Computation.&#160;— 2000.&#160;— Т. 13.&#160;— С. 11–49.&#160;— DOI:10.1023/A:1010000313106.
Харольд Абельсон, Джеральд Джей Сассман, Джули Сассман.&#32;Структура и интерпретация компьютерных программ (SICP).
Фредерик Брукс.&#32;Мифический человеко-месяц или Как создаются программные системы.&#160;— Addison-Wesley, 1975, 1995.&#160;— ISBN ISBN 5-93286-005-7 (1-е изд.).
Теренс Пратт.&#32;Языки программирования: разработка и реализация&#32;&#61;&#32;Programming Language Design and Implementation (PLDI).&#160;— 1-е издание.&#160;— Мир, 1979.
Альфред Ахо, Рави Сети, Джеффри Ульман.&#32;Компиляторы: принципы, технологии и инструменты.&#160;— Addison-Wesley Publishing Company, Издательский дом «Вильямс», 1985, 2001, 2003.&#160;— 768&#160;с.&#160;— ISBN 5-8459-0189-8 (рус.), 0-201-10088-6 (ориг.).
Time-Life Books.&#32;Язык компьютера&#32;&#61;&#32;Computer Languages.&#160;— М.: Мир, 1989.&#160;— Т.&#160;2.&#160;— 240&#160;с.&#160;— (Understanding Computers).&#160;— 100 000 экз.&#160;— ISBN 5-03-001148-X.
Лука Карделли[en].&#32;Typeful programming&#32;(&#160;(англ.))&#160;// IFIP State-of-the-Art Reports.&#160;— Springer-Verlag, 1991.&#160;— Вып. Formal Description of Programming Concepts.&#160;— С. 431–507.
Robin Milner, Mads Tofte[en].&#32;Commentary on Standard ML.&#160;— MIT Press, 1991.&#160;— ISBN 0-262-63132-7.
Альфред Ахо, Джеффри Ульман.&#32;Foundations of Computer Science.&#160;— Computer Science Press, 1992.
Andrew W. Appel.&#32;A Critique of Standard ML.&#160;— Princeton University, revised version of CS-TR-364-92, 1992.
Martin Ward.&#32;Language Oriented Programming.&#160;— Computer Science Department, Science Labs, 1994.
Ian Joyner.&#32;A Critique of C++ and Programming and Language Trends of the 1990s - 3rd Edition.&#160;// копирайт и список изданий.&#160;— 1996.
Lawrence C. Paulson[en].&#32;ML for the Working Programmer.&#160;— 2nd.&#160;— Cambridge, Great Britain: Cambridge University Press, 1996.&#160;— 492&#160;с.&#160;— ISBN 0-521-57050-6 (твёрдый переплёт), 0-521-56543-X (мягкий переплёт).
John C. Reynolds.&#32;Theories of programming languages.&#160;— Cambridge University Press, 1998.&#160;— ISBN 978-0-521-59414-1 (hardback), 978-0-521-10697-9 (paperback).
Andrew W. Appel.&#32;Modern compiler implementation in ML (in C, in Java).&#160;— Cambridge, Great Britain: Cambridge University Press, 1998.&#160;— 538&#160;с.&#160;— ISBN (ML) 0-521-58274-1 (hardback), 0-521-60764-7 (paperback).
Paul Hudak.&#32;Modular Domain Speciﬁc Languages and Tools.&#160;— IEEE Computer Society Press, Department of Computer Science, Yale University, 1998.
Роберт У. Себеста.&#32;Основные концепции языков программирования&#32;&#61;&#32;Concepts of Programming Languages&#32;&#47;&#32;Пер. с англ.&#160;— 5-е изд.&#160;— М.: Вильямс, 2001.&#160;— 672&#160;с.&#160;— 5000 экз.&#160;— ISBN 5-8459-0192-8 (рус.), ISBN 0-201-75295-6 (англ.).
Вольфенгаген В. Э.&#32;Конструкции языков программирования. Приёмы описания.&#160;— М.: Центр ЮрИнфоР, 2001.&#160;— 276&#160;с.&#160;— ISBN 5-89158-079-9.
Паронджанов В. Д.&#32;Как улучшить работу ума. Алгоритмы без программистов — это очень просто!&#160;— М.: Дело, 2001.&#160;— 360&#160;с.&#160;— ISBN 5-7749-0211-0.
Pierce, Benjamin C.&#32;Types and Programming Languages.&#160;— MIT Press, 2002.&#160;— ISBN 0-262-16209-1.
Перевод на русский язык: Пирс Б.&#32;Типы в языках программирования.&#160;— Добросвет, 2012.&#160;— 680&#160;с.&#160;— ISBN 978-5-7913-0082-9.
Теренс Пратт, Марвин Зелковиц.&#32;Языки программирования: разработка и реализация.&#160;— 4-е издание.&#160;— Питер, 2002.&#160;— (Классика Computer Science).&#160;— ISBN 978-5-318-00189-5.
Martin Campbell-Kelly.&#32;From Airline Reservations to Sonic the Hedgehog: A History of the Software Industry.&#160;— MIT Press, 2003.&#160;— 372&#160;с.&#160;— (History of Computing).&#160;— ISBN 978-1422391761.
Роберт Гласс.&#32;Факты и заблуждения профессионального программирования.&#160;— "Символ-Плюс", 2004.&#160;— 240&#160;с.&#160;— ISBN 5-93286-092-8, 978-5-93286-092-2.
John C. Mitchell.&#32;Concepts in Programming Languages.&#160;— Cambridge University Press, 2004.&#160;— ISBN 0-511-04091-1 (eBook in netLibrary); 0-521-78098-5 (hardback).
K. Czarnecki, J. O’Donnell, J. Striegnitz, W. Taha.&#32;DSL implementation in metaocaml, template haskell, and C++.&#160;— University of Waterloo, University of Glasgow, Research Centre Julich, Rice University, 2004.
Ф. Бьянкуцци, Ш. Уорден.&#32;Пионеры программирования. Диалоги с создателями наиболее популярных языков программирования.&#160;— СПб.: Символ-Плюс, 2010.&#160;— 608&#160;с.&#160;— ISBN 978-5-93286-170-7.
Питер Сейбел.&#32;Кодеры за работой. Размышления о ремесле программиста.&#160;— Символ-Плюс, СПб.&#160;— 2011.&#160;— ISBN 978-5-93286-188-2, 978-1-4302-1948-4 (англ.).
Robert Harper[en].&#32;Practical Foundations for Programming Languages.&#160;— version 1.37 (revised 01.11.2014).&#160;— licensed under the Creative Commons Attribution-Noncommercial-No Derivative Works 3.0 United States License., 2012.&#160;— 544&#160;с.
Marjan Mernik.&#32;Formal and Practical Aspects of Domain-Specific Languages.&#160;— IGI Global, 2012.&#160;— ISBN 978-1-4666-2092-6.
Ссылки[править | править код]
.mw-parser-output .ts-Родственные_проекты{background:#f8f9fa;border:1px solid #a2a9b1;clear:right;float:right;font-size:90%;margin:0 0 1em 1em;padding:.5em .75em}.mw-parser-output .ts-Родственные_проекты th,.mw-parser-output .ts-Родственные_проекты td{padding:.25em 0;vertical-align:middle}.mw-parser-output .ts-Родственные_проекты td{padding-left:.5em}




Язык программирования  в Викиучебнике












Язык программирования на Викискладе




Язык программирования в Викиновостях







The Language List&#160;(недоступная ссылка&#160;— история)&#160;(англ.)&#160;— более 2500 языков с кратким описанием
Computer Languages History&#160;(англ.)&#160;— история языков программирования (с 1954 по май 2004) (содержит регулярно обновляемую диаграмму)
Examples&#160;(недоступная ссылка&#160;— история)&#160;(англ.)&#160;— примеры программирования на 162 языках
Programming Language Popularity&#160;(англ.)&#160;— регулярно обновляемое исследование популярности языков программирования
10 языков программирования, которые стоит изучать (2006&#160;г.)
Programming Community Index&#160;(англ.)&#160;— регулярно обновляемый рейтинг популярности языков программирования
Computer Language Shootout Benchmarks&#160;(недоступная ссылка&#160;— история)&#160;(англ.)&#160;— сравнение языков программирования по эффективности
Programming Languages that are Loved&#160;(англ.)&#160;— сравнение языков программирования по «любви» и «ненависти» к ним
Брайан Керниган.&#32;Why Pascal is Not My Favorite Programming Language.&#160;— 1981.
Ehud Lamm.&#32;Hidden complexities of tail-call/tail-recursion optimization.&#32;LtU Classic Archives&#160;(англ.).&#32; Lambda the Ultimate&#32;(7&#160;December 2003).&#32;Проверено 30 ноября 2016.
Языки программированияХронология
Ассемблер
BASIC
C
C++
C#
COBOL
Fortran
Go
Java
JavaScript (JS)
Lisp
Lua
Pascal
Perl
PHP
Python
Ruby
Smalltalk
Visual Basic .NET (VB.NET)

 Категория
 Сравнение
 Списки: хронологический
по категориям







                                                Источник — https://ru.wikipedia.org/w/index.php?title=Язык_программирования&amp;oldid=97833962
                                Категория: Языки программированияСкрытые категории: Википедия:Статьи с некорректным использованием шаблонов:Cite web (не указан язык)Страницы, использующие волшебные ссылки ISBNВикипедия:Статьи с незавершёнными разделамиВикипедия:Нет источников с января 2017Википедия:Статьи без источников (тип: не указан)Википедия:Статьи с утверждениями без источников более 14 днейВикипедия:Запросы на замену перенаправлений переводамиВикипедия:Нет источников с декабря 2016Статьи со ссылками на ВикиучебникСтатьи со ссылками на ВикиновостиВикипедия:Статьи с нерабочими ссылками



                        Навигация


                                                Персональные инструменты

                                                        Вы не представились системеОбсуждениеВкладСоздать учётную записьВойти



                                                Пространства имён

                                                        СтатьяОбсуждение




                                                        Варианты







                                                Просмотры

                                                        ЧитатьПравитьПравить кодИстория



                                                Ещё





                                                        Поиск











                        Навигация


                                        Заглавная страницаРубрикацияУказатель А — ЯИзбранные статьиСлучайная статьяТекущие события



                        Участие


                                        Сообщить об ошибкеСообществоФорумСвежие правкиНовые страницыСправкаПожертвовать



                        Инструменты


                                        Ссылки сюдаСвязанные правкиСлужебные страницыПостоянная ссылкаСведения о страницеЭлемент ВикиданныхЦитировать страницу



                        Печать/экспорт


                                        Создать книгуСкачать как PDFВерсия для печати



                        В других проектах


                                        ВикискладMediaWikiВикиучебникВикиновости



                        На других языках


                                        AfrikaansAlemannischአማርኛAragonésالعربيةمصرىঅসমীয়াAsturianuAzərbaycancaتۆرکجهБашҡортсаBoarischŽemaitėškaБеларускаяБеларуская (тарашкевіца)‎БългарскиবাংলাBrezhonegBosanskiᨅᨔ ᨕᨘᨁᨗCatalàMìng-dĕ̤ng-ngṳ̄کوردیČeštinaЧӑвашлаCymraegDanskDeutschZazakiΕλληνικάEnglishEsperantoEspañolEestiEuskaraفارسیSuomiFrançaisGaeilgeGalegoעבריתहिन्दीHrvatskiHornjoserbsceMagyarՀայերենInterlinguaBahasa IndonesiaInterlingueIlokanoIdoÍslenskaItaliano日本語La .lojban.Basa JawaქართულიTaqbaylitҚазақшаភាសាខ្មែរ한국어КыргызчаLatinaLëtzebuergeschLumbaartLietuviųLatviešuОлык марийМакедонскиമലയാളംМонголमराठीBahasa MelayuMirandésမြန်မာဘာသာPlattdüütschनेपालीNederlandsNorsk nynorskNorskOccitanਪੰਜਾਬੀPolskiپنجابیپښتوPortuguêsRomânăРусиньскыйСаха тылаScotsSrpskohrvatski / српскохрватскиၽႃႇသႃႇတႆး සිංහලSimple EnglishSlovenčinaSlovenščinaShqipСрпски / srpskiBasa SundaSvenskaதமிழ்తెలుగుTetunТоҷикӣไทยTagalogTürkçeТатарча/tatarçaУкраїнськаاردوOʻzbekcha/ўзбекчаTiếng ViệtWinaray吴语მარგალურიייִדישYorùbá中文Bân-lâm-gú粵語
                                Править ссылки





                                                                 Эта страница в последний раз была отредактирована 1 февраля 2019 в 03:52.
                                                                Текст доступен по лицензии Creative Commons Attribution-ShareAlike; в отдельных случаях могут действовать дополнительные условия.
Подробнее см. Условия использования.
Wikipedia® — зарегистрированный товарный знак некоммерческой организации Wikimedia Foundation, Inc.


                                                                Политика конфиденциальности
                                                                Описание Википедии
                                                                Отказ от ответственности
                                                                Свяжитесь с нами
                                                                Разработчики
                                                                Соглашение о cookie
                                                                Мобильная версия










(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"1.556","walltime":"1.853","ppvisitednodes":{"value":26144,"limit":1000000},"ppgeneratednodes":{"value":0,"limit":1500000},"postexpandincludesize":{"value":240796,"limit":2097152},"templateargumentsize":{"value":94220,"limit":2097152},"expansiondepth":{"value":22,"limit":40},"expensivefunctioncount":{"value":46,"limit":500},"unstrip-depth":{"value":1,"limit":20},"unstrip-size":{"value":45182,"limit":5000000},"entityaccesscount":{"value":2,"limit":400},"timingprofile":["100.00% 1492.712      1 -total"," 22.13%  330.382      1 Шаблон:Примечания"," 12.59%  187.971     15 Шаблон:Статья"," 11.32%  168.906     27 Шаблон:Книга"," 11.17%  166.670     47 Шаблон:Sfn","  9.25%  138.123     51 Шаблон:Iw","  5.95%   88.742      1 Шаблон:Навигация","  5.86%   87.477      2 Шаблон:Нет_АИ","  5.58%   83.242      2 Шаблон:Cite_journal","  5.56%   83.041      4 Шаблон:Бсокр"]},"scribunto":{"limitreport-timeusage":{"value":"0.458","limit":"10.000"},"limitreport-memusage":{"value":6825605,"limit":52428800}},"cachereport":{"origin":"mw1323","timestamp":"20190215150309","ttl":2073600,"transientcontent":false}}});mw.config.set({"wgBackendResponseTime":130,"wgHostname":"mw1263"});});
